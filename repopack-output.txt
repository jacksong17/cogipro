This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-09-15T00:19:42.328Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
backend/package.json
backend/server/server.js
backend/setup_db.js
frontend/.git/COMMIT_EDITMSG
frontend/.git/config
frontend/.git/description
frontend/.git/HEAD
frontend/.git/hooks/applypatch-msg.sample
frontend/.git/hooks/commit-msg.sample
frontend/.git/hooks/fsmonitor-watchman.sample
frontend/.git/hooks/post-update.sample
frontend/.git/hooks/pre-applypatch.sample
frontend/.git/hooks/pre-commit.sample
frontend/.git/hooks/pre-merge-commit.sample
frontend/.git/hooks/pre-push.sample
frontend/.git/hooks/pre-rebase.sample
frontend/.git/hooks/pre-receive.sample
frontend/.git/hooks/prepare-commit-msg.sample
frontend/.git/hooks/push-to-checkout.sample
frontend/.git/hooks/sendemail-validate.sample
frontend/.git/hooks/update.sample
frontend/.git/info/exclude
frontend/.git/logs/HEAD
frontend/.git/logs/refs/heads/master
frontend/.git/refs/heads/master
frontend/.gitignore
frontend/package.json
frontend/public/index.html
frontend/public/manifest.json
frontend/public/robots.txt
frontend/README.md
frontend/src/App.css
frontend/src/App.js
frontend/src/components/Comments.css
frontend/src/components/Comments.js
frontend/src/components/DashboardBadges.css
frontend/src/components/DashboardBadges.js
frontend/src/components/DashboardContainer.js
frontend/src/components/DetailedProjectView.css
frontend/src/components/DetailedProjectView.js
frontend/src/components/EditProjectForm.css
frontend/src/components/EditProjectForm.js
frontend/src/components/ErrorBoundary.js
frontend/src/components/FilteredProjectList.css
frontend/src/components/FilteredProjectList.js
frontend/src/components/GanttChart.css
frontend/src/components/GanttChart.js
frontend/src/components/GanttContainer.js
frontend/src/components/PillarDistributionChart.css
frontend/src/components/PillarDistributionChart.js
frontend/src/components/ProjectForm.css
frontend/src/components/ProjectForm.js
frontend/src/components/ProjectList.css
frontend/src/components/ProjectList.js
frontend/src/components/ProjectsByPillarChart.css
frontend/src/components/ProjectsByPillarChart.js
frontend/src/components/ProjectsByStatusChart.css
frontend/src/components/ProjectsByStatusChart.js
frontend/src/components/ProjectsContainer.js
frontend/src/components/RecentlyCompletedList.css
frontend/src/components/RecentlyCompletedList.js
frontend/src/components/StatusDistributionChart.css
frontend/src/components/StatusDistributionChart.js
frontend/src/components/TaskManagement.css
frontend/src/components/TaskManagement.js
frontend/src/components/UpcomingDeadlinesList.css
frontend/src/components/UpcomingDeadlinesList.js
frontend/src/components/UpcomingDeadlinesTable.css
frontend/src/components/UpcomingDeadlinesTable.js
frontend/src/Dashboard - Copy.css
frontend/src/Dashboard.css
frontend/src/index.css
frontend/src/index.js
frontend/src/reportWebVitals.js
package.json
public/index.html
public/manifest.json
public/robots.txt

================================================================
Repository Files
================================================================

================
File: backend/package.json
================
{
  "name": "cogipro-backend",
  "version": "1.0.0",
  "main": "server/server.js",
  "scripts": {
    "start": "node server/server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "express": "^4.17.1",
    "sqlite3": "^5.1.7"
  }
}

================
File: backend/server/server.js
================
const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const cors = require('cors');

const app = express();
const port = process.env.PORT || 3001;

// Connect to SQLite database
const db = new sqlite3.Database('./cogipro.db', (err) => {
  if (err) {
    console.error('Error connecting to database:', err.message);
  } else {
    console.log('Connected to the SQLite database.');
  }
});

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Logging middleware
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);
  console.log('Request body:', req.body);
  next();
});

// Helper function to convert dates to ISO 8601 format
const toISODate = (dateString) => {
  if (!dateString) return null;
  const date = new Date(dateString);
  return date.toISOString().split('T')[0];
};

// API Routes

// Get all projects with optional filtering
app.get('/api/projects', (req, res) => {
  let query = `
    SELECT p.*, pil.pillar, ps.status
    FROM Project p
    JOIN Pillar pil ON p.pillar_id = pil.id
    JOIN ProjectStatus ps ON p.status_id = ps.id
  `;
  
  const params = [];
  
  if (req.query.filter === 'awaiting-triage') {
    query += ' WHERE ps.status = ?';
    params.push('Awaiting Triage');
  }
  
  query += ' ORDER BY p.submission_date DESC';
  
  db.all(query, params, (err, rows) => {
    if (err) {
      console.error('Error fetching projects:', err.message);
      return res.status(500).json({ error: 'Failed to fetch projects', details: err.message });
    }
    res.json(rows);
  });
});

// Create a new project
app.post('/api/projects', (req, res) => {
  console.log('Received project data:', req.body);
  const { name, pillar, description, submitter_name, owner, start_date, end_date } = req.body;
  
  if (!name || !pillar || !description || !submitter_name) {
    return res.status(400).json({ error: 'Missing required fields' });
  }

  db.serialize(() => {
    db.run('BEGIN TRANSACTION');

    // Get pillar_id
    db.get('SELECT id FROM Pillar WHERE pillar = ?', [pillar], (err, pillarRow) => {
      if (err) {
        console.error('Error getting pillar:', err.message);
        db.run('ROLLBACK');
        return res.status(500).json({ error: 'Failed to create project', details: err.message });
      }
      const pillar_id = pillarRow ? pillarRow.id : null;
      console.log('Pillar ID:', pillar_id);

      // Get status_id for 'Awaiting Triage'
      db.get('SELECT id FROM ProjectStatus WHERE status = ?', ['Awaiting Triage'], (err, statusRow) => {
        if (err) {
          console.error('Error getting status:', err.message);
          db.run('ROLLBACK');
          return res.status(500).json({ error: 'Failed to create project', details: err.message });
        }
        const status_id = statusRow ? statusRow.id : null;
        console.log('Status ID:', status_id);

        // Insert new project
        const query = `
          INSERT INTO Project (name, pillar_id, status_id, description, submitter_name, submission_date, owner, start_date, end_date)
          VALUES (?, ?, ?, ?, ?, DATE('now'), ?, ?, ?)
        `;
        db.run(query, [name, pillar_id, status_id, description, submitter_name, owner, start_date, end_date], function(err) {
          if (err) {
            console.error('Error inserting project:', err.message);
            db.run('ROLLBACK');
            return res.status(500).json({ error: 'Failed to create project', details: err.message });
          }
          db.run('COMMIT');
          console.log('Project created successfully. ID:', this.lastID);
          res.status(201).json({ id: this.lastID, message: 'Project created successfully' });
        });
      });
    });
  });
});

// Update a project
app.put('/api/projects/:id', (req, res) => {
  const { id } = req.params;
  const { name, pillar, status, description, owner, start_date, end_date } = req.body;
  console.log('Updating project:', id, req.body);
  
  db.serialize(() => {
    db.run('BEGIN TRANSACTION');

    // Get pillar_id
    db.get('SELECT id FROM Pillar WHERE pillar = ?', [pillar], (err, pillarRow) => {
      if (err) {
        console.error('Error getting pillar:', err.message);
        db.run('ROLLBACK');
        return res.status(500).json({ error: 'Failed to update project', details: err.message });
      }
      const pillar_id = pillarRow ? pillarRow.id : null;
      console.log('Pillar ID:', pillar_id);

      // Get status_id
      db.get('SELECT id FROM ProjectStatus WHERE status = ?', [status], (err, statusRow) => {
        if (err) {
          console.error('Error getting status:', err.message);
          db.run('ROLLBACK');
          return res.status(500).json({ error: 'Failed to update project', details: err.message });
        }
        const status_id = statusRow ? statusRow.id : null;
        console.log('Status ID:', status_id);

        // Update project
        const query = `
          UPDATE Project 
          SET name = ?, pillar_id = ?, status_id = ?, description = ?, owner = ?, start_date = ?, end_date = ?
          WHERE id = ?
        `;
        console.log('Update query:', query);
        console.log('Update params:', [name, pillar_id, status_id, description, owner, start_date, end_date, id]);
        db.run(query, [name, pillar_id, status_id, description, owner, start_date, end_date, id], function(err) {
          if (err) {
            console.error('Error updating project:', err.message);
            db.run('ROLLBACK');
            return res.status(500).json({ error: 'Failed to update project', details: err.message });
          }
          db.run('COMMIT');
          console.log('Project updated successfully');
          
          // Fetch the updated project to confirm the changes
          db.get(`
            SELECT p.*, pil.pillar, ps.status
            FROM Project p
            JOIN Pillar pil ON p.pillar_id = pil.id
            JOIN ProjectStatus ps ON p.status_id = ps.id
            WHERE p.id = ?
          `, [id], (err, updatedProject) => {
            if (err) {
              console.error('Error fetching updated project:', err.message);
              return res.status(500).json({ error: 'Project updated but failed to fetch updated data', details: err.message });
            }
            updatedProject.start_date = toISODate(updatedProject.start_date);
            updatedProject.end_date = toISODate(updatedProject.end_date);
            updatedProject.submission_date = toISODate(updatedProject.submission_date);
            console.log('Updated project:', updatedProject);
            res.json(updatedProject);
          });
        });
      });
    });
  });
});


// Delete a project
app.delete('/api/projects/:id', (req, res) => {
  const { id } = req.params;
  console.log('Deleting project:', id);
  db.run('DELETE FROM Project WHERE id = ?', id, function(err) {
    if (err) {
      console.error('Error deleting project:', err.message);
      return res.status(500).json({ error: 'Failed to delete project', details: err.message });
    }
    console.log('Project deleted successfully');
    res.json({ message: 'Project deleted successfully', changes: this.changes });
  });
});

// Get a single project's details
app.get('/api/projects/:id', (req, res) => {
  const { id } = req.params;
  const query = `
    SELECT 
      p.id, p.name, pil.pillar, ps.status, p.description, p.submitter_name, p.submission_date,
      p.owner, p.start_date, p.end_date
    FROM 
      Project p
    JOIN 
      Pillar pil ON p.pillar_id = pil.id
    LEFT JOIN 
      ProjectStatus ps ON p.status_id = ps.id
    WHERE
      p.id = ?
  `;
  
  db.get(query, [id], (err, row) => {
    if (err) {
      console.error('Error fetching project:', err.message);
      return res.status(500).json({ error: 'Failed to fetch project', details: err.message });
    }
    if (!row) {
      return res.status(404).json({ error: 'Project not found' });
    }
    console.log('Project fetched successfully:', row);
    res.json(row);
  });
});

// Get comments for a project
app.get('/api/projects/:projectId/comments', (req, res) => {
  const { projectId } = req.params;
  const query = `
    SELECT * FROM Comment
    WHERE project_id = ?
    ORDER BY created_at DESC
  `;
  
  db.all(query, [projectId], (err, rows) => {
    if (err) {
      console.error('Error fetching comments:', err.message);
      return res.status(500).json({ error: 'Failed to fetch comments', details: err.message });
    }
    res.json(rows);
  });
});

// Add a new comment
app.post('/api/projects/:projectId/comments', (req, res) => {
  const { projectId } = req.params;
  const { user_name, content } = req.body;
  
  const query = `
    INSERT INTO Comment (project_id, user_name, content)
    VALUES (?, ?, ?)
  `;
  
  db.run(query, [projectId, user_name, content], function(err) {
    if (err) {
      console.error('Error adding comment:', err.message);
      return res.status(500).json({ error: 'Failed to add comment', details: err.message });
    }
    res.status(201).json({ id: this.lastID, message: 'Comment added successfully' });
  });
});

// Get tasks for a project
app.get('/api/projects/:projectId/tasks', (req, res) => {
  const { projectId } = req.params;
  const query = `
    SELECT * FROM Task
    WHERE project_id = ?
    ORDER BY due_date ASC
  `;
  
  db.all(query, [projectId], (err, rows) => {
    if (err) {
      console.error('Error fetching tasks:', err.message);
      return res.status(500).json({ error: 'Failed to fetch tasks', details: err.message });
    }
    res.json(rows);
  });
});

// Add a new task
app.post('/api/projects/:projectId/tasks', (req, res) => {
  const { projectId } = req.params;
  const { name, description, assigned_to, due_date, status } = req.body;
  
  const query = `
    INSERT INTO Task (project_id, name, description, assigned_to, due_date, status)
    VALUES (?, ?, ?, ?, ?, ?)
  `;
  
  db.run(query, [projectId, name, description, assigned_to, due_date, status], function(err) {
    if (err) {
      console.error('Error adding task:', err.message);
      return res.status(500).json({ error: 'Failed to add task', details: err.message });
    }
    res.status(201).json({ id: this.lastID, message: 'Task added successfully' });
  });
});

// Update a task
app.put('/api/tasks/:taskId', (req, res) => {
  const { taskId } = req.params;
  const { name, description, assigned_to, due_date, status } = req.body;
  
  const query = `
    UPDATE Task
    SET name = ?, description = ?, assigned_to = ?, due_date = ?, status = ?
    WHERE id = ?
  `;
  
  db.run(query, [name, description, assigned_to, due_date, status, taskId], function(err) {
    if (err) {
      console.error('Error updating task:', err.message);
      return res.status(500).json({ error: 'Failed to update task', details: err.message });
    }
    res.json({ message: 'Task updated successfully' });
  });
});

// Delete a task
app.delete('/api/tasks/:taskId', (req, res) => {
  const { taskId } = req.params;
  
  const query = `DELETE FROM Task WHERE id = ?`;
  
  db.run(query, [taskId], function(err) {
    if (err) {
      console.error('Error deleting task:', err.message);
      return res.status(500).json({ error: 'Failed to delete task', details: err.message });
    }
    res.json({ message: 'Task deleted successfully' });
  });
});

// New route: Get projects by status
app.get('/api/projects-by-status', (req, res) => {
  const query = `
    SELECT ps.status, COUNT(p.id) as project_count
    FROM ProjectStatus ps
    LEFT JOIN Project p ON ps.id = p.status_id
    GROUP BY ps.status
  `;
  
  db.all(query, [], (err, rows) => {
    if (err) {
      console.error('Error fetching projects by status:', err.message);
      return res.status(500).json({ error: 'Failed to fetch projects by status', details: err.message });
    }
    console.log('Projects by status fetched successfully:', rows.length);
    res.json(rows);
  });
});

// New route: Get projects by pillar
app.get('/api/projects-by-pillar', (req, res) => {
  const query = `
    SELECT pil.pillar, COUNT(p.id) as project_count
    FROM Pillar pil
    LEFT JOIN Project p ON pil.id = p.pillar_id
    GROUP BY pil.pillar
  `;
  
  db.all(query, [], (err, rows) => {
    if (err) {
      console.error('Error fetching projects by pillar:', err.message);
      return res.status(500).json({ error: 'Failed to fetch projects by pillar', details: err.message });
    }
    console.log('Projects by pillar fetched successfully:', rows.length);
    res.json(rows);
  });
});

// New route: Get upcoming deadlines
app.get('/api/upcoming-deadlines', (req, res) => {
  const query = `
    SELECT p.name, p.end_date, ps.status
    FROM Project p
    JOIN ProjectStatus ps ON p.status_id = ps.id
    WHERE p.end_date BETWEEN DATE('now') AND DATE('now', '+30 days')
      AND ps.status NOT IN ('Early Adoption', 'In Production')
    ORDER BY p.end_date ASC
    LIMIT 10
  `;
  
  db.all(query, [], (err, rows) => {
    if (err) {
      console.error('Error fetching upcoming deadlines:', err.message);
      return res.status(500).json({ error: 'Failed to fetch upcoming deadlines', details: err.message });
    }
    console.log('Upcoming deadlines fetched successfully:', rows.length);
    res.json(rows);
  });
});

// New route: Get recently completed projects
app.get('/api/recently-completed', (req, res) => {
  const query = `
    SELECT p.name, p.end_date, pil.pillar
    FROM Project p
    JOIN ProjectStatus ps ON p.status_id = ps.id
    JOIN Pillar pil ON p.pillar_id = pil.id
    WHERE ps.status IN ('Early Adoption', 'In Production')
      AND p.end_date BETWEEN DATE('now', '-30 days') AND DATE('now')
    ORDER BY p.end_date DESC
    LIMIT 10
  `;
  
  db.all(query, [], (err, rows) => {
    if (err) {
      console.error('Error fetching recently completed projects:', err.message);
      return res.status(500).json({ error: 'Failed to fetch recently completed projects', details: err.message });
    }
    console.log('Recently completed projects fetched successfully:', rows.length);
    res.json(rows);
  });
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error('Error:', err);
  res.status(500).json({ error: 'Something went wrong!', details: err.message });
});

// Catch-all route for undefined routes
app.use((req, res) => {
  console.log(`404 - Route not found: ${req.method} ${req.url}`);
  res.status(404).json({ error: 'Route not found' });
});

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});

================
File: backend/setup_db.js
================
const sqlite3 = require('sqlite3').verbose();
const db = new sqlite3.Database('./cogipro.db');

const schema = `
-- Pillar table
CREATE TABLE IF NOT EXISTS Pillar (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    pillar TEXT NOT NULL UNIQUE
);

-- Project Status table
CREATE TABLE IF NOT EXISTS ProjectStatus (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    status TEXT NOT NULL UNIQUE
);

-- Priority table
CREATE TABLE IF NOT EXISTS Priority (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    priority TEXT NOT NULL UNIQUE
);

-- Scale table
CREATE TABLE IF NOT EXISTS Scale (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    scale TEXT NOT NULL UNIQUE
);

-- Effort table
CREATE TABLE IF NOT EXISTS Effort (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    effort TEXT NOT NULL UNIQUE
);

-- Project table
CREATE TABLE IF NOT EXISTS Project (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    pillar_id INTEGER,
    description TEXT,
    submitter_name TEXT,
    submission_date DATE,
    priority_id INTEGER,
    effort_id INTEGER,
    scale_id INTEGER,
    status_id INTEGER,
    owner TEXT,
    start_date DATE,
    end_date DATE,
    FOREIGN KEY (pillar_id) REFERENCES Pillar(id),
    FOREIGN KEY (priority_id) REFERENCES Priority(id),
    FOREIGN KEY (effort_id) REFERENCES Effort(id),
    FOREIGN KEY (scale_id) REFERENCES Scale(id),
    FOREIGN KEY (status_id) REFERENCES ProjectStatus(id)
);

-- Comments table
CREATE TABLE IF NOT EXISTS Comment (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    project_id INTEGER,
    user_name TEXT NOT NULL,
    content TEXT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (project_id) REFERENCES Project(id)
);

-- Tasks table
CREATE TABLE IF NOT EXISTS Task (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    project_id INTEGER,
    name TEXT NOT NULL,
    description TEXT,
    assigned_to TEXT,
    due_date DATE,
    status TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (project_id) REFERENCES Project(id)
);

-- Views
CREATE VIEW IF NOT EXISTS vw_projects_by_status AS
SELECT 
    ps.status,
    COUNT(p.id) as project_count
FROM 
    Project p
JOIN 
    ProjectStatus ps ON p.status_id = ps.id
GROUP BY 
    ps.status;

CREATE VIEW IF NOT EXISTS vw_projects_by_pillar AS
SELECT 
    pil.pillar,
    COUNT(p.id) as project_count
FROM 
    Project p
JOIN 
    Pillar pil ON p.pillar_id = pil.id
GROUP BY 
    pil.pillar;

CREATE VIEW IF NOT EXISTS vw_upcoming_deadlines AS
SELECT 
    p.name,
    p.end_date,
    ps.status
FROM 
    Project p
JOIN 
    ProjectStatus ps ON p.status_id = ps.id
WHERE 
    p.end_date BETWEEN DATE('now') AND DATE('now', '+30 days')
    AND ps.status NOT IN ('Early Adoption', 'In Production')
ORDER BY 
    p.end_date ASC;

CREATE VIEW IF NOT EXISTS vw_recently_completed AS
SELECT 
    p.name,
    p.end_date,
    pil.pillar
FROM 
    Project p
JOIN 
    ProjectStatus ps ON p.status_id = ps.id
JOIN 
    Pillar pil ON p.pillar_id = pil.id
WHERE 
    ps.status IN ('Early Adoption', 'In Production')
    AND p.end_date BETWEEN DATE('now', '-30 days') AND DATE('now')
ORDER BY 
    p.end_date DESC;
`;

const testData = `
-- Insert test data into Pillar table
INSERT OR IGNORE INTO Pillar (pillar) VALUES 
('Executive Reporting'),
('Operational Reporting'),
('Regulatory Reporting and Extracts'),
('BI Steering and Governance'),
('Enterprise Data Platform'),
('Predictive and Generative AI'),
('Other');

-- Insert test data into ProjectStatus table
INSERT OR IGNORE INTO ProjectStatus (status) VALUES 
('Awaiting Triage'),
('Backlog'),
('In Design'),
('Ready to Start'),
('Needs Help'),
('Off Track'),
('On Track'),
('Early Adoption'),
('In Production');

-- Insert test data into Project table
INSERT OR IGNORE INTO Project (name, pillar_id, status_id, description, submitter_name, submission_date, owner, start_date, end_date) VALUES 
('Executive Dashboard', 1, 3, 'Create an executive dashboard for quarterly reviews', 'John Doe', '2023-05-01', 'Jane Smith', '2023-06-01', '2023-08-31'),
('Sales Report Automation', 2, 2, 'Automate the generation of weekly sales reports', 'Alice Johnson', '2023-04-15', 'Bob Williams', '2023-07-01', '2023-09-30'),
('Regulatory Compliance Report', 3, 4, 'Develop a comprehensive regulatory compliance report', 'Charlie Brown', '2023-05-10', 'Diana Prince', '2023-06-15', '2023-10-31'),
('Data Governance Framework', 4, 1, 'Establish a data governance framework for the organization', 'Eva Green', '2023-05-20', 'Frank Castle', '2023-08-01', '2023-12-31');

-- Insert test data into Comment table
INSERT OR IGNORE INTO Comment (project_id, user_name, content) VALUES 
(1, 'John Doe', 'Great progress on the executive dashboard!'),
(2, 'Jane Smith', 'We need to speed up the automation process.');

-- Insert test data into Task table
INSERT OR IGNORE INTO Task (project_id, name, description, assigned_to, due_date, status) VALUES 
(1, 'Design UI mockups', 'Create initial UI designs for the executive dashboard', 'Alice Johnson', '2023-07-15', 'In Progress'),
(2, 'Implement data pipeline', 'Set up the data pipeline for sales report automation', 'Bob Williams', '2023-08-01', 'Not Started');
`;

db.serialize(() => {
  db.exec(schema, (err) => {
    if (err) {
      console.error('Error creating schema:', err);
    } else {
      console.log('Schema created successfully');
      db.exec(testData, (err) => {
        if (err) {
          console.error('Error inserting test data:', err);
        } else {
          console.log('Test data inserted successfully');
        }
        db.close();
      });
    }
  });
});

================
File: frontend/.git/COMMIT_EDITMSG
================
Initialize project using Create React App

================
File: frontend/.git/config
================
[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true

================
File: frontend/.git/description
================
Unnamed repository; edit this file 'description' to name the repository.

================
File: frontend/.git/HEAD
================
ref: refs/heads/master

================
File: frontend/.git/hooks/applypatch-msg.sample
================
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

================
File: frontend/.git/hooks/commit-msg.sample
================
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

================
File: frontend/.git/hooks/fsmonitor-watchman.sample
================
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

================
File: frontend/.git/hooks/post-update.sample
================
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

================
File: frontend/.git/hooks/pre-applypatch.sample
================
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

================
File: frontend/.git/hooks/pre-commit.sample
================
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

================
File: frontend/.git/hooks/pre-merge-commit.sample
================
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

================
File: frontend/.git/hooks/pre-push.sample
================
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

================
File: frontend/.git/hooks/pre-rebase.sample
================
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

================
File: frontend/.git/hooks/pre-receive.sample
================
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

================
File: frontend/.git/hooks/prepare-commit-msg.sample
================
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

================
File: frontend/.git/hooks/push-to-checkout.sample
================
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi

================
File: frontend/.git/hooks/sendemail-validate.sample
================
#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi

================
File: frontend/.git/hooks/update.sample
================
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

================
File: frontend/.git/info/exclude
================
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

================
File: frontend/.git/logs/HEAD
================
0000000000000000000000000000000000000000 8781159c72c3d4da07566b2435df496a93d4fda9 jgrimm17 <jacksongrimm17@gmail.com> 1726191724 -0500	commit (initial): Initialize project using Create React App

================
File: frontend/.git/logs/refs/heads/master
================
0000000000000000000000000000000000000000 8781159c72c3d4da07566b2435df496a93d4fda9 jgrimm17 <jacksongrimm17@gmail.com> 1726191724 -0500	commit (initial): Initialize project using Create React App

================
File: frontend/.git/refs/heads/master
================
8781159c72c3d4da07566b2435df496a93d4fda9

================
File: frontend/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: frontend/package.json
================
{
  "name": "cogipro-frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^5.3.0",
    "react-scripts": "5.0.1",
    "recharts": "^2.5.0",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "proxy": "http://localhost:3001"
}

================
File: frontend/public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: frontend/public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: frontend/public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: frontend/README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: frontend/src/App.css
================
.App {
  text-align: center;
}

.App-header {
  background-color: #282c34;
  padding: 20px;
  color: white;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
}

.App-header h1 {
  margin: 0;
  font-size: 2rem;
}

.App-nav {
  background-color: #f8f9fa;
  border-bottom: 1px solid #e9ecef;
  position: fixed;
  top: 80px;
  left: 0;
  right: 0;
  z-index: 1000;
}

.App-nav ul {
  list-style-type: none;
  padding: 0;
  margin: 0;
  display: flex;
  justify-content: center;
}

.App-nav li {
  margin: 0 10px;
}

.App-nav button {
  background: none;
  border: none;
  padding: 15px 20px;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.3s, color 0.3s;
}

.App-nav button:hover {
  background-color: #e9ecef;
}

.App-nav button.active {
  border-bottom: 3px solid #007bff;
  font-weight: bold;
  color: #007bff;
}

main {
  padding: 140px 20px 20px;
  margin-top: 60px;
}

.loading {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 200px;
  font-size: 1.2rem;
  color: #666;
}

@media (max-width: 768px) {
  .App-nav ul {
    flex-direction: column;
  }

  .App-nav li {
    margin: 5px 0;
  }

  main {
    padding-top: 200px;
  }
}

================
File: frontend/src/App.js
================
import React, { useState, lazy, Suspense } from 'react';
import { BrowserRouter as Router, Route, Switch, Link, useHistory } from 'react-router-dom';
import './App.css';
import './Dashboard.css';
import ErrorBoundary from './components/ErrorBoundary';

const DashboardContainer = lazy(() => import('./components/DashboardContainer'));
const ProjectsContainer = lazy(() => import('./components/ProjectsContainer'));
const GanttContainer = lazy(() => import('./components/GanttContainer'));
const DetailedProjectView = lazy(() => import('./components/DetailedProjectView'));
const FilteredProjectList = lazy(() => import('./components/FilteredProjectList'));

function App() {
  const [activeTab, setActiveTab] = useState('dashboard');
  const history = useHistory();

  const handleFilterChange = (filter) => {
    history.push(`/projects/filtered?filter=${filter}`);
  };

  return (
    <Router>
      <div className="App">
        <header className="App-header">
          <h1>CogiPro Internal Project Management</h1>
        </header>
        <nav className="App-nav">
          <ul>
            <li>
              <Link to="/" className={activeTab === 'dashboard' ? 'active' : ''} onClick={() => setActiveTab('dashboard')}>
                Dashboard
              </Link>
            </li>
            <li>
              <Link to="/projects" className={activeTab === 'projects' ? 'active' : ''} onClick={() => setActiveTab('projects')}>
                Projects
              </Link>
            </li>
            <li>
              <Link to="/gantt" className={activeTab === 'gantt' ? 'active' : ''} onClick={() => setActiveTab('gantt')}>
                Gantt
              </Link>
            </li>
          </ul>
        </nav>
        <main>
          <ErrorBoundary>
            <Suspense fallback={<div className="loading">Loading...</div>}>
              <Switch>
                <Route exact path="/" render={() => <DashboardContainer onFilterChange={handleFilterChange} />} />
                <Route exact path="/projects" component={ProjectsContainer} />
                <Route path="/projects/filtered" component={FilteredProjectList} />
                <Route path="/projects/:id" component={DetailedProjectView} />
                <Route path="/gantt" component={GanttContainer} />
              </Switch>
            </Suspense>
          </ErrorBoundary>
        </main>
      </div>
    </Router>
  );
}

export default App;

================
File: frontend/src/components/Comments.css
================
.comments-section {
  margin-top: 30px;
}

.comments-section h2 {
  font-size: 20px;
  margin-bottom: 15px;
  color: #333;
}

.comment-list {
  list-style-type: none;
  padding: 0;
}

.comment {
  background-color: #fff;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 15px;
  margin-bottom: 15px;
}

.comment-header {
  display: flex;
  justify-content: space-between;
  margin-bottom: 10px;
}

.user-name {
  font-weight: bold;
  color: #333;
}

.comment-date {
  color: #777;
  font-size: 0.9em;
}

.comment-content {
  color: #444;
  line-height: 1.5;
}

.comment-form {
  margin-top: 20px;
  background-color: #f9f9f9;
  padding: 15px;
  border-radius: 8px;
}

.comment-form input,
.comment-form textarea {
  width: 100%;
  padding: 10px;
  margin-bottom: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

.comment-form textarea {
  height: 100px;
  resize: vertical;
}

.comment-form button {
  background-color: #4CAF50;
  color: white;
  border: none;
  padding: 10px 20px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  transition-duration: 0.4s;
  cursor: pointer;
  border-radius: 4px;
}

.comment-form button:hover {
  background-color: #45a049;
}

@media (max-width: 768px) {
  .comment-form {
    padding: 10px;
  }
  
  .comment-form input,
  .comment-form textarea,
  .comment-form button {
    font-size: 14px;
  }
}

================
File: frontend/src/components/Comments.js
================
import React, { useState, useEffect, useCallback } from 'react';
import './Comments.css';

const Comments = ({ projectId }) => {
  const [comments, setComments] = useState([]);
  const [newComment, setNewComment] = useState('');
  const [userName, setUserName] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchComments = useCallback(async () => {
    try {
      const response = await fetch(`/api/projects/${projectId}/comments`);
      if (!response.ok) {
        throw new Error('Failed to fetch comments');
      }
      const data = await response.json();
      setComments(data);
      setLoading(false);
    } catch (err) {
      setError(err.message);
      setLoading(false);
    }
  }, [projectId]);

  useEffect(() => {
    fetchComments();
  }, [fetchComments]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!newComment.trim() || !userName.trim()) return;

    try {
      const response = await fetch(`/api/projects/${projectId}/comments`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ user_name: userName, content: newComment }),
      });

      if (!response.ok) {
        throw new Error('Failed to add comment');
      }

      setNewComment('');
      fetchComments();
    } catch (err) {
      setError(err.message);
    }
  };

  if (loading) return <div className="loading">Loading comments...</div>;
  if (error) return <div className="error-message">Error: {error}</div>;

  return (
    <div className="comments-section">
      <h2>Comments</h2>
      <ul className="comment-list">
        {comments.map((comment) => (
          <li key={comment.id} className="comment">
            <div className="comment-header">
              <span className="user-name">{comment.user_name}</span>
              <span className="comment-date">{new Date(comment.created_at).toLocaleString()}</span>
            </div>
            <p className="comment-content">{comment.content}</p>
          </li>
        ))}
      </ul>
      <form onSubmit={handleSubmit} className="comment-form">
        <input
          type="text"
          value={userName}
          onChange={(e) => setUserName(e.target.value)}
          placeholder="Your Name"
          required
        />
        <textarea
          value={newComment}
          onChange={(e) => setNewComment(e.target.value)}
          placeholder="Add a comment..."
          required
        ></textarea>
        <button type="submit">Post Comment</button>
      </form>
    </div>
  );
};

export default Comments;

================
File: frontend/src/components/DashboardBadges.css
================
.dashboard-badges {
  display: flex;
  justify-content: space-between;
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
}

.badge {
  background-color: #fff;
  border-radius: 10px;
  padding: 20px;
  width: 25%;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  cursor: pointer;
  transition: transform 0.3s ease;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.badge:hover {
  transform: translateY(-5px);
}

.badge h3 {
  margin: 0 0 10px 0;
  font-size: 18px;
}

.badge-count {
  font-size: 24px;
  font-weight: bold;
  margin: 0 0 10px 0;
}

.sub-badges {
  display: flex;
  justify-content: space-between;
}

.sub-badge {
  background-color: rgba(0, 0, 0, 0.1);
  border-radius: 5px;
  padding: 5px;
  font-size: 12px;
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 30%;
}

.active-projects {
  background-color: #4caf50;
  color: white;
}

.backlog-projects {
  background-color: #2196f3;
  color: white;
}

.awaiting-triage {
  background-color: #ff9800;
  color: white;
}

.on-track { background-color: #81c784; }
.off-track { background-color: #e57373; }
.needs-help { background-color: #ffd54f; }
.backlog { background-color: #64b5f6; }
.in-design { background-color: #4dd0e1; }
.ready-to-start { background-color: #7986cb; }

@media (max-width: 1200px) {
  .dashboard-badges {
    flex-direction: column;
    align-items: center;
  }

  .badge {
    width: 80%;
    margin-bottom: 20px;
  }
}

================
File: frontend/src/components/DashboardBadges.js
================
import React from 'react';
import './DashboardBadges.css';

const DashboardBadges = ({ data = {}, onBadgeClick }) => {
  const { activeProjects = {}, backlogProjects = {}, awaitingTriage = 0 } = data;

  return (
    <div className="dashboard-badges">
      <div className="badge active-projects" onClick={() => onBadgeClick('active')}>
        <h3>Active Projects</h3>
        <p className="badge-count">{activeProjects.total || 0}</p>
        <div className="sub-badges">
          <div className="sub-badge on-track" onClick={(e) => { e.stopPropagation(); onBadgeClick('on-track'); }}>
            <span>On Track</span>
            <span>{activeProjects.onTrack || 0}</span>
          </div>
          <div className="sub-badge off-track" onClick={(e) => { e.stopPropagation(); onBadgeClick('off-track'); }}>
            <span>Off Track</span>
            <span>{activeProjects.offTrack || 0}</span>
          </div>
          <div className="sub-badge needs-help" onClick={(e) => { e.stopPropagation(); onBadgeClick('needs-help'); }}>
            <span>Needs Help</span>
            <span>{activeProjects.needsHelp || 0}</span>
          </div>
        </div>
      </div>
      <div className="badge backlog-projects" onClick={() => onBadgeClick('backlog')}>
        <h3>Backlog Projects</h3>
        <p className="badge-count">{backlogProjects.total || 0}</p>
        <div className="sub-badges">
          <div className="sub-badge backlog" onClick={(e) => { e.stopPropagation(); onBadgeClick('backlog'); }}>
            <span>Backlog</span>
            <span>{backlogProjects.backlog || 0}</span>
          </div>
          <div className="sub-badge in-design" onClick={(e) => { e.stopPropagation(); onBadgeClick('in-design'); }}>
            <span>In Design</span>
            <span>{backlogProjects.inDesign || 0}</span>
          </div>
          <div className="sub-badge ready-to-start" onClick={(e) => { e.stopPropagation(); onBadgeClick('ready-to-start'); }}>
            <span>Ready to Start</span>
            <span>{backlogProjects.readyToStart || 0}</span>
          </div>
        </div>
      </div>
      <div className="badge awaiting-triage" onClick={() => onBadgeClick('awaiting-triage')}>
        <h3>Awaiting Triage</h3>
        <p className="badge-count">{awaitingTriage}</p>
      </div>
    </div>
  );
};

export default DashboardBadges;

================
File: frontend/src/components/DashboardContainer.js
================
import React, { useState, useEffect } from 'react';
import DashboardBadges from './DashboardBadges';
import ProjectsByStatusChart from './ProjectsByStatusChart';
import ProjectsByPillarChart from './ProjectsByPillarChart';
import UpcomingDeadlinesList from './UpcomingDeadlinesList';
import RecentlyCompletedList from './RecentlyCompletedList';
import '../Dashboard.css';

const DashboardContainer = ({ onFilterChange }) => {
  const [data, setData] = useState({
    projectsByStatus: [],
    projectsByPillar: [],
    upcomingDeadlines: [],
    recentlyCompleted: [],
    badgeData: {
      activeProjects: { total: 0, onTrack: 0, offTrack: 0, needsHelp: 0 },
      backlogProjects: { total: 0, backlog: 0, inDesign: 0, readyToStart: 0 },
      awaitingTriage: 0
    }
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        const [statusResponse, pillarResponse, deadlinesResponse, completedResponse] = await Promise.all([
          fetch('/api/projects-by-status'),
          fetch('/api/projects-by-pillar'),
          fetch('/api/upcoming-deadlines'),
          fetch('/api/recently-completed')
        ]);

        const [statusData, pillarData, deadlinesData, completedData] = await Promise.all([
          statusResponse.json(),
          pillarResponse.json(),
          deadlinesResponse.json(),
          completedResponse.json()
        ]);

        const badgeData = calculateBadgeData(statusData);

        setData({
          projectsByStatus: statusData,
          projectsByPillar: pillarData,
          upcomingDeadlines: deadlinesData,
          recentlyCompleted: completedData,
          badgeData: badgeData
        });
        setError(null);
      } catch (error) {
        console.error('Error fetching data:', error);
        setError('Failed to fetch data. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
    const intervalId = setInterval(fetchData, 300000); // Refresh every 5 minutes

    return () => clearInterval(intervalId); // Clean up on component unmount
  }, []);

  const calculateBadgeData = (statusData) => {
    const badgeData = {
      activeProjects: { total: 0, onTrack: 0, offTrack: 0, needsHelp: 0 },
      backlogProjects: { total: 0, backlog: 0, inDesign: 0, readyToStart: 0 },
      awaitingTriage: 0
    };

    statusData.forEach(item => {
      switch (item.status) {
        case 'On Track':
          badgeData.activeProjects.onTrack = item.project_count;
          badgeData.activeProjects.total += item.project_count;
          break;
        case 'Off Track':
          badgeData.activeProjects.offTrack = item.project_count;
          badgeData.activeProjects.total += item.project_count;
          break;
        case 'Needs Help':
          badgeData.activeProjects.needsHelp = item.project_count;
          badgeData.activeProjects.total += item.project_count;
          break;
        case 'Backlog':
          badgeData.backlogProjects.backlog = item.project_count;
          badgeData.backlogProjects.total += item.project_count;
          break;
        case 'In Design':
          badgeData.backlogProjects.inDesign = item.project_count;
          badgeData.backlogProjects.total += item.project_count;
          break;
        case 'Ready to Start':
          badgeData.backlogProjects.readyToStart = item.project_count;
          badgeData.backlogProjects.total += item.project_count;
          break;
        case 'Awaiting Triage':
          badgeData.awaitingTriage = item.project_count;
          break;
        default:
          break;
      }
    });

    return badgeData;
  };

  const handleFilterChange = (filter) => {
    onFilterChange(filter);
  };

  if (loading) {
    return <div className="loading">Loading dashboard data...</div>;
  }

  if (error) {
    return <div className="error-message">{error}</div>;
  }

  return (
    <div className="dashboard-container">
      <div className="dashboard-badges-wrapper">
        <DashboardBadges data={data.badgeData} onBadgeClick={handleFilterChange} />
      </div>
      <div className="dashboard-grid">
        <div className="dashboard-grid-item">
          <ProjectsByStatusChart data={data.projectsByStatus} onBarClick={handleFilterChange} />
        </div>
        <div className="dashboard-grid-item">
          <UpcomingDeadlinesList data={data.upcomingDeadlines} />
        </div>
        <div className="dashboard-grid-item">
          <ProjectsByPillarChart data={data.projectsByPillar} onBarClick={handleFilterChange} />
        </div>
        <div className="dashboard-grid-item">
          <RecentlyCompletedList data={data.recentlyCompleted} />
        </div>
      </div>
    </div>
  );
};

export default DashboardContainer;

================
File: frontend/src/components/DetailedProjectView.css
================
.detailed-project-view {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  background-color: #f9f9f9;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.detailed-project-view h1 {
  font-size: 24px;
  margin-bottom: 20px;
  color: #333;
}

.project-details {
  background-color: #fff;
  padding: 20px;
  border-radius: 8px;
  margin-bottom: 20px;
}

.project-details p {
  margin-bottom: 10px;
}

.project-details strong {
  font-weight: bold;
  color: #555;
}

.loading,
.error-message {
  text-align: center;
  margin-top: 50px;
  font-size: 18px;
  color: #666;
}

.error-message {
  color: #ff4136;
}

@media (max-width: 768px) {
  .detailed-project-view {
    padding: 10px;
  }
  
  .project-details {
    padding: 15px;
  }
}

================
File: frontend/src/components/DetailedProjectView.js
================
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import Comments from './Comments';
import TaskManagement from './TaskManagement';
import './DetailedProjectView.css';

const DetailedProjectView = () => {
  const [project, setProject] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { id } = useParams();

  useEffect(() => {
    const fetchProject = async () => {
      try {
        const response = await fetch(`/api/projects/${id}`);
        if (!response.ok) {
          throw new Error('Failed to fetch project details');
        }
        const data = await response.json();
        setProject(data);
        setLoading(false);
      } catch (err) {
        setError(err.message);
        setLoading(false);
      }
    };

    fetchProject();
  }, [id]);

  if (loading) return <div className="loading">Loading project details...</div>;
  if (error) return <div className="error-message">Error: {error}</div>;
  if (!project) return <div className="error-message">Project not found</div>;

  return (
    <div className="detailed-project-view">
      <h1>{project.name}</h1>
      <div className="project-details">
        <p><strong>Pillar:</strong> {project.pillar}</p>
        <p><strong>Status:</strong> {project.status}</p>
        <p><strong>Owner:</strong> {project.owner}</p>
        <p><strong>Start Date:</strong> {project.start_date ? new Date(project.start_date).toLocaleDateString() : 'N/A'}</p>
        <p><strong>End Date:</strong> {project.end_date ? new Date(project.end_date).toLocaleDateString() : 'N/A'}</p>
        <p><strong>Description:</strong> {project.description}</p>
        <p><strong>Submitter Name:</strong> {project.submitter_name}</p>
        <p><strong>Submission Date:</strong> {project.submission_date ? new Date(project.submission_date).toLocaleDateString() : 'N/A'}</p>
      </div>
      <TaskManagement projectId={id} />
      <Comments projectId={id} />
    </div>
  );
};

export default DetailedProjectView;

================
File: frontend/src/components/EditProjectForm.css
================
.project-form-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.project-form {
  background-color: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 90%;
  max-width: 500px;
  max-height: 90vh;
  overflow-y: auto;
}

.project-form h2 {
  margin-bottom: 20px;
  text-align: center;
  color: #333;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
  color: #555;
}

.form-group input,
.form-group select,
.form-group textarea {
  width: 100%;
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

.form-group textarea {
  height: 100px;
  resize: vertical;
}

.form-actions {
  display: flex;
  justify-content: flex-end;
  margin-top: 20px;
}

.submit-btn,
.cancel-btn {
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s;
}

.submit-btn {
  background-color: #4CAF50;
  color: white;
  margin-right: 10px;
}

.submit-btn:hover {
  background-color: #45a049;
}

.cancel-btn {
  background-color: #f44336;
  color: white;
}

.cancel-btn:hover {
  background-color: #da190b;
}

@media (max-width: 600px) {
  .project-form {
    width: 95%;
    padding: 15px;
  }

  .form-actions {
    flex-direction: column;
  }

  .submit-btn,
  .cancel-btn {
    width: 100%;
    margin-right: 0;
    margin-bottom: 10px;
  }
}

================
File: frontend/src/components/EditProjectForm.js
================
import React, { useState, useEffect } from 'react';
import './EditProjectForm.css';

const EditProjectForm = ({ project, onSubmit, onCancel }) => {
  const [formData, setFormData] = useState({
    name: '',
    pillar: '',
    description: '',
    owner: '',
    status: '',
    start_date: '',
    end_date: ''
  });

  useEffect(() => {
    if (project) {
      setFormData({
        name: project.name || '',
        pillar: project.pillar || '',
        description: project.description || '',
        owner: project.owner || '',
        status: project.status || '',
        start_date: project.start_date || '',
        end_date: project.end_date || ''
      });
    }
  }, [project]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevData => ({
      ...prevData,
      [name]: value
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
  };

  return (
    <div className="project-form-overlay">
      <div className="project-form">
        <h2>Edit Project</h2>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label htmlFor="name">Project Name</label>
            <input
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="pillar">Pillar</label>
            <select
              id="pillar"
              name="pillar"
              value={formData.pillar}
              onChange={handleChange}
              required
            >
              <option value="">Select a pillar</option>
              <option value="Executive Reporting">Executive Reporting</option>
              <option value="Operational Reporting">Operational Reporting</option>
              <option value="Regulatory Reporting and Extracts">Regulatory Reporting and Extracts</option>
              <option value="BI Steering and Governance">BI Steering and Governance</option>
              <option value="Enterprise Data Platform">Enterprise Data Platform</option>
              <option value="Predictive and Generative AI">Predictive and Generative AI</option>
              <option value="Other">Other</option>
            </select>
          </div>
          <div className="form-group">
            <label htmlFor="description">Description</label>
            <textarea
              id="description"
              name="description"
              value={formData.description}
              onChange={handleChange}
            ></textarea>
          </div>
          <div className="form-group">
            <label htmlFor="owner">Owner</label>
            <input
              type="text"
              id="owner"
              name="owner"
              value={formData.owner}
              onChange={handleChange}
            />
          </div>
          <div className="form-group">
            <label htmlFor="status">Status</label>
            <select
              id="status"
              name="status"
              value={formData.status}
              onChange={handleChange}
              required
            >
              <option value="">Select a status</option>
              <option value="Awaiting Triage">Awaiting Triage</option>
              <option value="Backlog">Backlog</option>
              <option value="In Design">In Design</option>
              <option value="Ready to Start">Ready to Start</option>
              <option value="Needs Help">Needs Help</option>
              <option value="Off Track">Off Track</option>
              <option value="On Track">On Track</option>
              <option value="Early Adoption">Early Adoption</option>
              <option value="In Production">In Production</option>
            </select>
          </div>
          <div className="form-group">
            <label htmlFor="start_date">Start Date</label>
            <input
              type="date"
              id="start_date"
              name="start_date"
              value={formData.start_date}
              onChange={handleChange}
            />
          </div>
          <div className="form-group">
            <label htmlFor="end_date">End Date</label>
            <input
              type="date"
              id="end_date"
              name="end_date"
              value={formData.end_date}
              onChange={handleChange}
            />
          </div>
          <div className="form-actions">
            <button type="submit" className="submit-btn">
              Update Project
            </button>
            <button type="button" className="cancel-btn" onClick={onCancel}>
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default EditProjectForm;

================
File: frontend/src/components/ErrorBoundary.js
================
import React from 'react';

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    console.error('ErrorBoundary caught an error:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="error-boundary">
          <h2>Oops! Something went wrong.</h2>
          <p>We're sorry, but an error occurred. Please try refreshing the page or contact support if the problem persists.</p>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

================
File: frontend/src/components/FilteredProjectList.css
================
.filtered-project-list {
  background-color: #ffffff;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  padding: 20px;
  margin-bottom: 20px;
}

.filtered-project-list h2 {
  font-size: 1.5rem;
  margin-bottom: 15px;
  color: #333;
}

.filtered-project-list table {
  width: 100%;
  border-collapse: collapse;
}

.filtered-project-list th,
.filtered-project-list td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid #ddd;
}

.filtered-project-list th {
  background-color: #f2f2f2;
  font-weight: bold;
  cursor: pointer;
}

.filtered-project-list th:hover {
  background-color: #e0e0e0;
}

.loading,
.error-message {
  text-align: center;
  margin-top: 50px;
  font-size: 18px;
  color: #666;
}

.error-message {
  color: #ff4136;
}

@media (max-width: 768px) {
  .filtered-project-list {
    padding: 15px;
  }
  
  .filtered-project-list table {
    font-size: 14px;
  }
  
  .filtered-project-list th,
  .filtered-project-list td {
    padding: 8px;
  }
}

================
File: frontend/src/components/FilteredProjectList.js
================
import React, { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import './FilteredProjectList.css';

const FilteredProjectList = () => {
  const [projects, setProjects] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [sortConfig, setSortConfig] = useState({ key: 'name', direction: 'asc' });
  const [filter, setFilter] = useState('');

  const location = useLocation();

  useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    const filterParam = searchParams.get('filter');
    if (filterParam) {
      setFilter(filterParam);
    }
  }, [location]);

  useEffect(() => {
    const fetchProjects = async () => {
      setLoading(true);
      try {
        const response = await fetch(`/api/projects?filter=${filter}`);
        if (!response.ok) {
          throw new Error('Failed to fetch projects');
        }
        const data = await response.json();
        setProjects(data);
        setError(null);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchProjects();
  }, [filter]);

  const requestSort = (key) => {
    let direction = 'asc';
    if (sortConfig.key === key && sortConfig.direction === 'asc') {
      direction = 'desc';
    }
    setSortConfig({ key, direction });
  };

  const sortedProjects = [...projects].sort((a, b) => {
    if (a[sortConfig.key] < b[sortConfig.key]) {
      return sortConfig.direction === 'asc' ? -1 : 1;
    }
    if (a[sortConfig.key] > b[sortConfig.key]) {
      return sortConfig.direction === 'asc' ? 1 : -1;
    }
    return 0;
  });

  if (loading) return <div className="loading">Loading projects...</div>;
  if (error) return <div className="error-message">Error: {error}</div>;

  return (
    <div className="filtered-project-list">
      <h2>Filtered Projects: {filter}</h2>
      <table>
        <thead>
          <tr>
            <th onClick={() => requestSort('name')}>Project Name</th>
            <th onClick={() => requestSort('pillar')}>Pillar</th>
            <th onClick={() => requestSort('status')}>Status</th>
            <th onClick={() => requestSort('start_date')}>Start Date</th>
            <th onClick={() => requestSort('end_date')}>End Date</th>
          </tr>
        </thead>
        <tbody>
          {sortedProjects.map((project) => (
            <tr key={project.id}>
              <td>{project.name}</td>
              <td>{project.pillar}</td>
              <td>{project.status}</td>
              <td>{new Date(project.start_date).toLocaleDateString()}</td>
              <td>{new Date(project.end_date).toLocaleDateString()}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default FilteredProjectList;

================
File: frontend/src/components/GanttChart.css
================
.gantt-chart-container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  background-color: #f9f9f9;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.gantt-chart-container h2 {
  font-size: 24px;
  margin-bottom: 20px;
  color: #333;
}

.gantt-chart {
  width: 100%;
  overflow-x: auto;
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  padding: 20px;
}

.timeline {
  display: flex;
  justify-content: space-between;
  margin-bottom: 10px;
  border-bottom: 1px solid #eee;
  padding-bottom: 10px;
}

.month-marker {
  font-size: 12px;
  color: #666;
}

svg {
  display: block;
}

text {
  font-family: Arial, sans-serif;
  font-weight: bold;
  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.5);
}

.gantt-legend {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  margin-top: 20px;
  padding: 10px;
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.legend-item {
  display: flex;
  align-items: center;
  margin: 5px 10px;
}

.legend-color {
  width: 20px;
  height: 20px;
  border-radius: 4px;
  margin-right: 5px;
}

.loading,
.error-message {
  text-align: center;
  margin-top: 50px;
  font-size: 18px;
  color: #666;
}

.error-message {
  color: #ff4136;
}

@media (max-width: 768px) {
  .gantt-chart-container {
    padding: 10px;
  }
  
  .gantt-chart {
    padding: 10px;
  }
  
  .timeline {
    font-size: 10px;
  }
  
  .gantt-legend {
    flex-direction: column;
  }
}

================
File: frontend/src/components/GanttChart.js
================
import React, { useState, useEffect, useRef } from 'react';
import './GanttChart.css';

const GanttChartView = () => {
  const [projects, setProjects] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [zoom, setZoom] = useState(1);
  const [pan, setPan] = useState(0);
  const [selectedProject, setSelectedProject] = useState(null);
  const svgRef = useRef(null);

  useEffect(() => {
    const fetchProjects = async () => {
      try {
        const response = await fetch('/api/projects');
        if (!response.ok) {
          throw new Error('Failed to fetch projects');
        }
        const data = await response.json();
        setProjects(data);
        setLoading(false);
      } catch (err) {
        setError(err.message);
        setLoading(false);
      }
    };

    fetchProjects();
  }, []);

  if (loading) return <div className="loading">Loading Gantt chart...</div>;
  if (error) return <div className="error-message">Error: {error}</div>;

  const earliestDate = new Date(Math.min(...projects.map(p => new Date(p.start_date))));
  const latestDate = new Date(Math.max(...projects.map(p => new Date(p.end_date))));
  const totalDays = (latestDate - earliestDate) / (1000 * 60 * 60 * 24);

  const getPositionAndWidth = (start, end) => {
    const startPosition = (new Date(start) - earliestDate) / (1000 * 60 * 60 * 24);
    const width = (new Date(end) - new Date(start)) / (1000 * 60 * 60 * 24);
    return { x: (startPosition / totalDays) * 100, width: (width / totalDays) * 100 };
  };

  const statusColors = {
    'Awaiting Triage': '#FFA500',
    'Backlog': '#FFD700',
    'In Design': '#32CD32',
    'Ready to Start': '#1E90FF',
    'Needs Help': '#FF6347',
    'Off Track': '#DC143C',
    'On Track': '#228B22',
    'Early Adoption': '#4169E1',
    'In Production': '#8A2BE2'
  };

  const handleZoomIn = () => setZoom(prev => Math.min(prev * 1.2, 5));
  const handleZoomOut = () => setZoom(prev => Math.max(prev / 1.2, 0.5));
  const handlePan = (direction) => setPan(prev => prev + direction * 50);

  const handleWheel = (e) => {
    if (e.ctrlKey) {
      e.preventDefault();
      if (e.deltaY < 0) {
        handleZoomIn();
      } else {
        handleZoomOut();
      }
    }
  };

  const handleProjectClick = (project) => {
    setSelectedProject(project);
  };

  return (
    <div className="gantt-chart-container" onWheel={handleWheel}>
      <h2>Project Timeline</h2>
      <div className="gantt-controls">
        <button onClick={handleZoomIn}>Zoom In</button>
        <button onClick={handleZoomOut}>Zoom Out</button>
        <button onClick={() => handlePan(-1)}>Pan Left</button>
        <button onClick={() => handlePan(1)}>Pan Right</button>
      </div>
      <div className="gantt-chart" style={{ overflow: 'hidden' }}>
        <div className="timeline" style={{ transform: `translateX(${pan}px)` }}>
          {Array.from({ length: Math.ceil(totalDays / 30) }).map((_, index) => {
            const date = new Date(earliestDate.getTime() + index * 30 * 24 * 60 * 60 * 1000);
            return <div key={index} className="month-marker">{date.toLocaleDateString('default', { month: 'short', year: 'numeric' })}</div>;
          })}
        </div>
        <svg 
          ref={svgRef}
          width={`${100 * zoom}%`} 
          height={projects.length * 50 + 50} 
          style={{ transform: `translateX(${pan}px)` }}
        >
          {projects.map((project, index) => {
            const { x, width } = getPositionAndWidth(project.start_date, project.end_date);
            return (
              <g key={project.id} onClick={() => handleProjectClick(project)}>
                <rect
                  x={`${x}%`}
                  y={index * 50 + 5}
                  width={`${width}%`}
                  height="40"
                  fill={statusColors[project.status]}
                  rx="5"
                  ry="5"
                />
                <text
                  x={`${x + 0.5}%`}
                  y={index * 50 + 30}
                  fill="white"
                  fontSize="12"
                >
                  {project.name}
                </text>
              </g>
            );
          })}
        </svg>
      </div>
      <div className="gantt-legend">
        {Object.entries(statusColors).map(([status, color]) => (
          <div key={status} className="legend-item">
            <div className="legend-color" style={{ backgroundColor: color }}></div>
            <span>{status}</span>
          </div>
        ))}
      </div>
      {selectedProject && (
        <div className="project-details">
          <h3>{selectedProject.name}</h3>
          <p>Status: {selectedProject.status}</p>
          <p>Pillar: {selectedProject.pillar}</p>
          <p>Start Date: {new Date(selectedProject.start_date).toLocaleDateString()}</p>
          <p>End Date: {new Date(selectedProject.end_date).toLocaleDateString()}</p>
          <button onClick={() => setSelectedProject(null)}>Close</button>
        </div>
      )}
    </div>
  );
};

export default GanttChartView;

================
File: frontend/src/components/GanttContainer.js
================
import React from 'react';
import GanttChartView from './GanttChart';

const GanttContainer = () => {
  return (
    <div className="gantt-container">
      <GanttChartView />
    </div>
  );
};

export default GanttContainer;

================
File: frontend/src/components/PillarDistributionChart.css
================
.projects-by-pillar-chart {
  height: 100%;
  display: flex;
  flex-direction: column;
}

.projects-by-pillar-chart h2 {
  font-size: 1.2rem;
  margin-bottom: 10px;
  color: #333;
}

@media (max-width: 768px) {
  .projects-by-pillar-chart {
    height: 300px;
  }
}

================
File: frontend/src/components/PillarDistributionChart.js
================
import React from 'react';
import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts';
import './PillarDistributionChart.css';

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82ca9d', '#ffc658'];

const PillarDistributionChart = ({ data, onPieClick }) => {
  if (!Array.isArray(data) || data.length === 0) {
    return <div className="pillar-distribution-chart">No data available for project pillar distribution</div>;
  }

  const handleClick = (entry, index) => {
    if (onPieClick) {
      onPieClick(entry.pillar);
    }
  };

  return (
    <div className="pillar-distribution-chart">
      <h2>Projects by Pillar</h2>
      <ResponsiveContainer width="100%" height={300}>
        <PieChart>
          <Pie
            data={data}
            cx="50%"
            cy="50%"
            labelLine={false}
            outerRadius={80}
            fill="#8884d8"
            dataKey="project_count"
            label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
            onClick={handleClick}
          >
            {data.map((entry, index) => (
              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
            ))}
          </Pie>
          <Tooltip />
          <Legend />
        </PieChart>
      </ResponsiveContainer>
    </div>
  );
};

export default PillarDistributionChart;

================
File: frontend/src/components/ProjectForm.css
================
.project-form-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.project-form {
  background-color: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 90%;
  max-width: 500px;
  max-height: 90vh;
  overflow-y: auto;
}

.project-form h2 {
  margin-bottom: 20px;
  text-align: center;
  color: #333;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
  color: #555;
}

.form-group input,
.form-group select,
.form-group textarea {
  width: 100%;
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

.form-group textarea {
  height: 100px;
  resize: vertical;
}

.form-actions {
  display: flex;
  justify-content: flex-end;
  margin-top: 20px;
}

.submit-btn,
.cancel-btn {
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s;
}

.submit-btn {
  background-color: #4CAF50;
  color: white;
  margin-right: 10px;
}

.submit-btn:hover {
  background-color: #45a049;
}

.cancel-btn {
  background-color: #f44336;
  color: white;
}

.cancel-btn:hover {
  background-color: #da190b;
}

@media (max-width: 600px) {
  .project-form {
    width: 95%;
    padding: 15px;
  }

  .form-actions {
    flex-direction: column;
  }

  .submit-btn,
  .cancel-btn {
    width: 100%;
    margin-right: 0;
    margin-bottom: 10px;
  }
}

================
File: frontend/src/components/ProjectForm.js
================
import React, { useState, useEffect } from 'react';
import './ProjectForm.css';

const ProjectForm = ({ project, onSubmit, onCancel }) => {
  const [formData, setFormData] = useState({
    name: '',
    pillar: '',
    description: '',
    submitter_name: '',
    status: '',
    owner: '',
    start_date: '',
    end_date: ''
  });

  useEffect(() => {
    if (project) {
      setFormData({
        name: project.name || '',
        pillar: project.pillar || '',
        description: project.description || '',
        submitter_name: project.submitter_name || '',
        status: project.status || '',
        owner: project.owner || '',
        start_date: project.start_date || '',
        end_date: project.end_date || ''
      });
    }
  }, [project]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevData => ({
      ...prevData,
      [name]: value
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
  };

  return (
    <div className="project-form-overlay">
      <div className="project-form">
        <h2>{project ? 'Edit Project' : 'Create New Project'}</h2>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label htmlFor="name">Project Name</label>
            <input
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="pillar">Pillar</label>
            <select
              id="pillar"
              name="pillar"
              value={formData.pillar}
              onChange={handleChange}
              required
            >
              <option value="">Select a pillar</option>
              <option value="Executive Reporting">Executive Reporting</option>
              <option value="Operational Reporting">Operational Reporting</option>
              <option value="Regulatory Reporting and Extracts">Regulatory Reporting and Extracts</option>
              <option value="BI Steering and Governance">BI Steering and Governance</option>
              <option value="Enterprise Data Platform">Enterprise Data Platform</option>
              <option value="Predictive and Generative AI">Predictive and Generative AI</option>
              <option value="Other">Other</option>
            </select>
          </div>
          <div className="form-group">
            <label htmlFor="description">Description</label>
            <textarea
              id="description"
              name="description"
              value={formData.description}
              onChange={handleChange}
            ></textarea>
          </div>
          <div className="form-group">
            <label htmlFor="submitter_name">Submitter Name</label>
            <input
              type="text"
              id="submitter_name"
              name="submitter_name"
              value={formData.submitter_name}
              onChange={handleChange}
            />
          </div>
          <div className="form-group">
            <label htmlFor="owner">Owner</label>
            <input
              type="text"
              id="owner"
              name="owner"
              value={formData.owner}
              onChange={handleChange}
            />
          </div>
          <div className="form-group">
            <label htmlFor="start_date">Start Date</label>
            <input
              type="date"
              id="start_date"
              name="start_date"
              value={formData.start_date}
              onChange={handleChange}
            />
          </div>
          <div className="form-group">
            <label htmlFor="end_date">End Date</label>
            <input
              type="date"
              id="end_date"
              name="end_date"
              value={formData.end_date}
              onChange={handleChange}
            />
          </div>
          {project && (
            <div className="form-group">
              <label htmlFor="status">Status</label>
              <select
                id="status"
                name="status"
                value={formData.status}
                onChange={handleChange}
                required
              >
                <option value="">Select a status</option>
                <option value="Awaiting Triage">Awaiting Triage</option>
                <option value="Backlog">Backlog</option>
                <option value="In Design">In Design</option>
                <option value="Ready to Start">Ready to Start</option>
                <option value="Needs Help">Needs Help</option>
                <option value="Off Track">Off Track</option>
                <option value="On Track">On Track</option>
                <option value="Early Adoption">Early Adoption</option>
                <option value="In Production">In Production</option>
              </select>
            </div>
          )}
          <div className="form-actions">
            <button type="submit" className="submit-btn">
              {project ? 'Update Project' : 'Create Project'}
            </button>
            <button type="button" className="cancel-btn" onClick={onCancel}>
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ProjectForm;

================
File: frontend/src/components/ProjectList.css
================
.project-list {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  background-color: #f9f9f9;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.project-list h2 {
  font-size: 24px;
  margin-bottom: 20px;
  color: #333;
}

.filters-and-actions {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.filters-and-actions select {
  padding: 8px 12px;
  font-size: 14px;
  border: 1px solid #ddd;
  border-radius: 4px;
  background-color: white;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.project-actions {
  display: flex;
  gap: 10px;
}

.filters {
  display: flex;
  gap: 10px;
}

.filters select,
.project-actions button {
  padding: 8px 12px;
  font-size: 14px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.create-btn,
.triage-btn {
  color: white;
  font-weight: bold;
}

.create-btn {
  background-color: #2196F3;
}

.create-btn:hover {
  background-color: #1976D2;
}

.triage-btn {
  background-color: #FFC107;
  color: #000;
}

.triage-btn:hover {
  background-color: #FFA000;
}

.project-list table {
  width: 100%;
  border-collapse: collapse;
  background-color: white;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.project-list th,
.project-list td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid #e0e0e0;
}

.project-list th {
  background-color: #f5f5f5;
  font-weight: bold;
  cursor: pointer;
}

.project-list th:hover {
  background-color: #e0e0e0;
}

.project-list .pagination {
  display: flex;
  justify-content: center;
  margin-top: 20px;
}

.project-list .pagination button {
  margin: 0 5px;
  padding: 8px 12px;
  background-color: #f2f2f2;
  border: 1px solid #ddd;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.project-list .pagination button:hover {
  background-color: #e0e0e0;
}

.project-list .pagination button.active {
  background-color: #2196F3;
  color: white;
  border-color: #2196F3;
}

.edit-btn,
.delete-btn {
  padding: 6px 10px;
  margin-right: 5px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.edit-btn {
  background-color: #4CAF50;
  color: white;
}

.edit-btn:hover {
  background-color: #45a049;
}

.delete-btn {
  background-color: #f44336;
  color: white;
}

.delete-btn:hover {
  background-color: #d32f2f;
}

.loading,
.error-message {
  text-align: center;
  margin-top: 50px;
  font-size: 18px;
  color: #666;
}

.error-message {
  color: #f44336;
}

@media (max-width: 768px) {
  .project-list {
    padding: 10px;
  }
  
  .filters-and-actions {
    flex-direction: column;
    align-items: stretch;
  }
  
  .filters-and-actions select,
  .project-actions {
    margin-bottom: 10px;
  }
  
  .project-actions {
    flex-direction: column;
  }
  
  .create-btn,
  .triage-btn {
    width: 100%;
  }
  
  .project-list table {
    font-size: 14px;
  }
  
  .project-list th,
  .project-list td {
    padding: 8px;
  }
}

================
File: frontend/src/components/ProjectList.js
================
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import './ProjectList.css';

const ProjectList = ({ projects, onEditProject, onDeleteProject, showAwaitingTriage, onCreateProject, onToggleAwaitingTriage }) => {
  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' });
  const [filterConfig, setFilterConfig] = useState({ pillar: '', status: '' });
  const [currentPage, setCurrentPage] = useState(1);
  const [projectsPerPage] = useState(10);

  const handleSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const handleFilter = (key, value) => {
    setFilterConfig({ ...filterConfig, [key]: value });
    setCurrentPage(1);
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    date.setDate(date.getDate() + 1); // Add one day to the date
    return date.toLocaleDateString();
  };

  const sortedAndFilteredProjects = projects
    .filter(project => 
      (filterConfig.pillar === '' || project.pillar === filterConfig.pillar) &&
      (filterConfig.status === '' || project.status === filterConfig.status)
    )
    .sort((a, b) => {
      if (sortConfig.key) {
        const aValue = a[sortConfig.key];
        const bValue = b[sortConfig.key];
        if (aValue < bValue) return sortConfig.direction === 'ascending' ? -1 : 1;
        if (aValue > bValue) return sortConfig.direction === 'ascending' ? 1 : -1;
      }
      return 0;
    });

  const indexOfLastProject = currentPage * projectsPerPage;
  const indexOfFirstProject = indexOfLastProject - projectsPerPage;
  const currentProjects = sortedAndFilteredProjects.slice(indexOfFirstProject, indexOfLastProject);

  const paginate = (pageNumber) => setCurrentPage(pageNumber);

  return (
    <div className="project-list">
      <div className="filters-and-actions">
        <div className="project-actions">
          <button onClick={onCreateProject} className="create-btn">Create New Project</button>
          <button onClick={onToggleAwaitingTriage} className="triage-btn">
            {showAwaitingTriage ? 'Show All Projects' : 'Triage Projects'}
          </button>
        </div>
        <div className="filters">
          <select onChange={(e) => handleFilter('status', e.target.value)}>
            <option value="">All Statuses</option>
            {[...new Set(projects.map(p => p.status))].map(status => (
              <option key={status} value={status}>{status}</option>
            ))}
          </select>
          <select onChange={(e) => handleFilter('pillar', e.target.value)}>
            <option value="">All Pillars</option>
            {[...new Set(projects.map(p => p.pillar))].map(pillar => (
              <option key={pillar} value={pillar}>{pillar}</option>
            ))}
          </select>
        </div>
      </div>
      <table>
        <thead>
          <tr>
            <th onClick={() => handleSort('name')}>Name {sortConfig.key === 'name' && (sortConfig.direction === 'ascending' ? '▲' : '▼')}</th>
            <th onClick={() => handleSort('pillar')}>Pillar {sortConfig.key === 'pillar' && (sortConfig.direction === 'ascending' ? '▲' : '▼')}</th>
            {showAwaitingTriage ? (
              <>
                <th onClick={() => handleSort('submitter_name')}>Submitter Name {sortConfig.key === 'submitter_name' && (sortConfig.direction === 'ascending' ? '▲' : '▼')}</th>
                <th onClick={() => handleSort('submission_date')}>Submission Date {sortConfig.key === 'submission_date' && (sortConfig.direction === 'ascending' ? '▲' : '▼')}</th>
              </>
            ) : (
              <>
                <th onClick={() => handleSort('owner')}>Owner {sortConfig.key === 'owner' && (sortConfig.direction === 'ascending' ? '▲' : '▼')}</th>
                <th onClick={() => handleSort('status')}>Status {sortConfig.key === 'status' && (sortConfig.direction === 'ascending' ? '▲' : '▼')}</th>
                <th onClick={() => handleSort('start_date')}>Start Date {sortConfig.key === 'start_date' && (sortConfig.direction === 'ascending' ? '▲' : '▼')}</th>
                <th onClick={() => handleSort('end_date')}>End Date {sortConfig.key === 'end_date' && (sortConfig.direction === 'ascending' ? '▲' : '▼')}</th>
              </>
            )}
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {currentProjects.map((project) => (
            <tr key={project.id}>
              <td>
                <Link to={`/projects/${project.id}`}>{project.name}</Link>
              </td>
              <td>{project.pillar}</td>
              {showAwaitingTriage ? (
                <>
                  <td>{project.submitter_name}</td>
                  <td>{formatDate(project.submission_date)}</td>
                </>
              ) : (
                <>
                  <td>{project.owner}</td>
                  <td>{project.status}</td>
                  <td>{formatDate(project.start_date)}</td>
                  <td>{formatDate(project.end_date)}</td>
                </>
              )}
              <td>
                <button onClick={() => onEditProject(project)} className="edit-btn">Edit</button>
                <button onClick={() => onDeleteProject(project.id)} className="delete-btn">Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      <div className="pagination">
        {Array.from({ length: Math.ceil(sortedAndFilteredProjects.length / projectsPerPage) }, (_, i) => (
          <button key={i + 1} onClick={() => paginate(i + 1)} className={currentPage === i + 1 ? 'active' : ''}>
            {i + 1}
          </button>
        ))}
      </div>
    </div>
  );
};

export default ProjectList;

================
File: frontend/src/components/ProjectsByPillarChart.css
================
.projects-by-pillar-chart {
  height: 100%;
  display: flex;
  flex-direction: column;
}

.projects-by-pillar-chart h2 {
  font-size: 1.2rem;
  margin-bottom: 10px;
  color: #333;
}

@media (max-width: 768px) {
  .projects-by-pillar-chart {
    height: 300px;
  }
}

================
File: frontend/src/components/ProjectsByPillarChart.js
================
import React from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import './ProjectsByPillarChart.css';

const ProjectsByPillarChart = ({ data, onBarClick }) => {
  if (!Array.isArray(data) || data.length === 0) {
    return <div className="projects-by-pillar-chart">No data available for project pillar distribution</div>;
  }

  const handleClick = (entry) => {
    if (onBarClick) {
      onBarClick(entry.pillar);
    }
  };

  return (
    <div className="projects-by-pillar-chart">
      <h2>Projects by Pillar</h2>
      <ResponsiveContainer width="100%" height={200}>
        <BarChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="pillar" angle={-45} textAnchor="end" height={60} />
          <YAxis />
          <Tooltip />
          <Bar dataKey="project_count" fill="#82ca9d" onClick={handleClick} cursor="pointer" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
};

export default ProjectsByPillarChart;

================
File: frontend/src/components/ProjectsByStatusChart.css
================
.projects-by-status-chart {
  background-color: #ffffff;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  padding: 20px;
  margin-bottom: 20px;
}

.projects-by-status-chart h2 {
  font-size: 1.5rem;
  margin-bottom: 15px;
  color: #333;
}

@media (max-width: 768px) {
  .projects-by-status-chart {
    padding: 15px;
  }
}

================
File: frontend/src/components/ProjectsByStatusChart.js
================
import React from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import './ProjectsByStatusChart.css';

const ProjectsByStatusChart = ({ data, onBarClick }) => {
  if (!Array.isArray(data) || data.length === 0) {
    return <div className="projects-by-status-chart">No data available for project status distribution</div>;
  }

  const handleClick = (entry) => {
    if (onBarClick) {
      onBarClick(entry.status);
    }
  };

  return (
    <div className="projects-by-status-chart">
      <h2>Projects by Status</h2>
      <ResponsiveContainer width="100%" height={200}>
        <BarChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="status" angle={-45} textAnchor="end" height={60} />
          <YAxis />
          <Tooltip />
          <Bar dataKey="project_count" fill="#8884d8" onClick={handleClick} cursor="pointer" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
};

export default ProjectsByStatusChart;

================
File: frontend/src/components/ProjectsContainer.js
================
import React, { useState, useEffect } from 'react';
import ProjectList from './ProjectList';
import ProjectForm from './ProjectForm';
import EditProjectForm from './EditProjectForm';

const ProjectsContainer = () => {
  const [projects, setProjects] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [showEditForm, setShowEditForm] = useState(false);
  const [editingProject, setEditingProject] = useState(null);
  const [showAwaitingTriage, setShowAwaitingTriage] = useState(false);

  useEffect(() => {
    fetchProjects();
  }, [showAwaitingTriage]);

  const fetchProjects = async () => {
    try {
      const url = showAwaitingTriage ? '/api/projects?filter=awaiting-triage' : '/api/projects';
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      setProjects(data);
      setLoading(false);
    } catch (err) {
      console.error('Error fetching projects:', err);
      setError(`Failed to fetch projects. ${err.message}`);
      setLoading(false);
    }
  };

  const handleCreateProject = () => {
    setShowCreateForm(true);
  };

  const handleEditProject = (project) => {
    setEditingProject(project);
    setShowEditForm(true);
  };

  const handleCreateFormSubmit = async (projectData) => {
    try {
      const response = await fetch('/api/projects', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(projectData),
      });
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      setShowCreateForm(false);
      fetchProjects();
    } catch (err) {
      console.error('Error creating project:', err);
      setError(`Failed to create project. ${err.message}`);
    }
  };

  const handleEditFormSubmit = async (projectData) => {
    try {
      const response = await fetch(`/api/projects/${editingProject.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(projectData),
      });
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      setShowEditForm(false);
      setEditingProject(null);
      fetchProjects();
    } catch (err) {
      console.error('Error updating project:', err);
      setError(`Failed to update project. ${err.message}`);
    }
  };

  const handleDeleteProject = async (id) => {
    if (window.confirm('Are you sure you want to delete this project?')) {
      try {
        const response = await fetch(`/api/projects/${id}`, {
          method: 'DELETE',
        });
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        fetchProjects();
      } catch (err) {
        console.error('Error deleting project:', err);
        setError(`Failed to delete project. ${err.message}`);
      }
    }
  };

  const toggleAwaitingTriage = () => {
    setShowAwaitingTriage(!showAwaitingTriage);
  };

  if (loading) return <div className="loading">Loading projects...</div>;
  if (error) return <div className="error-message">Error: {error}</div>;

  return (
    <div className="projects-container">
      <h1>{showAwaitingTriage ? 'Triage Projects' : 'Projects'}</h1>
      {error && <div className="error-message">{error}</div>}
      <ProjectList
        projects={projects}
        onEditProject={handleEditProject}
        onDeleteProject={handleDeleteProject}
        showAwaitingTriage={showAwaitingTriage}
        onCreateProject={handleCreateProject}
        onToggleAwaitingTriage={toggleAwaitingTriage}
      />
      {showCreateForm && (
        <ProjectForm
          onSubmit={handleCreateFormSubmit}
          onCancel={() => setShowCreateForm(false)}
          showAwaitingTriage={showAwaitingTriage}
        />
      )}
      {showEditForm && (
        <EditProjectForm
          project={editingProject}
          onSubmit={handleEditFormSubmit}
          onCancel={() => setShowEditForm(false)}
        />
      )}
    </div>
  );
};

export default ProjectsContainer;

================
File: frontend/src/components/RecentlyCompletedList.css
================
.recently-completed-list {
  height: 100%;
  display: flex;
  flex-direction: column;
}

.recently-completed-list h2 {
  font-size: 1.2rem;
  margin-bottom: 10px;
  color: #333;
}

.recently-completed-list h3 {
  font-size: 1rem;
  margin-top: 15px;
  margin-bottom: 5px;
  color: #666;
}

.recently-completed-list ul {
  list-style-type: none;
  padding: 0;
  margin: 0;
  overflow-y: auto;
}

.recently-completed-list li {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 0;
  border-bottom: 1px solid #eee;
}

.recently-completed-list li:last-child {
  border-bottom: none;
}

.recently-completed-list .project-name {
  flex-grow: 1;
  margin-right: 10px;
}

.recently-completed-list .completion-date,
.recently-completed-list .days-since-completion {
  flex-shrink: 0;
  font-size: 0.9em;
  color: #666;
}

@media (max-width: 768px) {
  .recently-completed-list {
    height: 300px;
  }
}

================
File: frontend/src/components/RecentlyCompletedList.js
================
import React from 'react';
import './RecentlyCompletedList.css';

const RecentlyCompletedList = ({ data }) => {
  if (!Array.isArray(data) || data.length === 0) {
    return <div className="recently-completed-list">No recently completed projects</div>;
  }

  const earlyAdopters = data.filter(item => item.status === 'Early Adoption');
  const inProduction = data.filter(item => item.status === 'In Production');

  const renderList = (items, header) => (
    <div>
      <h3>{header}</h3>
      <ul>
        {items.map((item, index) => {
          const completionDate = new Date(item.end_date);
          const today = new Date();
          const daysSinceCompletion = Math.floor((today - completionDate) / (1000 * 60 * 60 * 24));
          return (
            <li key={index}>
              <span className="project-name">{item.name}</span>
              <span className="completion-date">{completionDate.toLocaleDateString()}</span>
              <span className="days-since-completion">{daysSinceCompletion} days ago</span>
            </li>
          );
        })}
      </ul>
    </div>
  );

  return (
    <div className="recently-completed-list">
      <h2>Recently Completed Projects</h2>
      {renderList(earlyAdopters, 'Early Adopters')}
      {renderList(inProduction, 'In Production')}
    </div>
  );
};

export default RecentlyCompletedList;

================
File: frontend/src/components/StatusDistributionChart.css
================
.status-distribution-chart {
  width: 100%;
  max-width: 600px;
  margin: 20px auto;
}

.status-distribution-chart h2 {
  text-align: center;
  margin-bottom: 20px;
}

.chart {
  display: flex;
  justify-content: space-around;
  align-items: flex-end;
  height: 300px;
  padding: 20px 0;
}

.bar-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 40px;
}

.bar {
  width: 100%;
  background-color: #4CAF50;
  display: flex;
  justify-content: center;
  align-items: flex-end;
  transition: height 0.5s ease-in-out;
}

.count {
  color: white;
  padding: 5px 0;
  font-size: 12px;
}

.label {
  margin-top: 10px;
  text-align: center;
  font-size: 12px;
  transform: rotate(-45deg);
  white-space: nowrap;
}

================
File: frontend/src/components/StatusDistributionChart.js
================
import React from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import './StatusDistributionChart.css';

const StatusDistributionChart = ({ data, onBarClick }) => {
  if (!Array.isArray(data) || data.length === 0) {
    return <div className="status-distribution-chart">No data available for project status distribution</div>;
  }

  const handleClick = (entry) => {
    if (onBarClick) {
      onBarClick(entry.status);
    }
  };

  return (
    <div className="status-distribution-chart">
      <h2>Projects by Status</h2>
      <ResponsiveContainer width="100%" height={300}>
        <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="status" />
          <YAxis />
          <Tooltip />
          <Bar dataKey="project_count" fill="#8884d8" onClick={handleClick} cursor="pointer" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
};

export default StatusDistributionChart;

================
File: frontend/src/components/TaskManagement.css
================
.task-management {
  margin-top: 30px;
}

.task-management h2 {
  font-size: 20px;
  margin-bottom: 15px;
  color: #333;
}

.task-form {
  background-color: #f9f9f9;
  padding: 20px;
  border-radius: 8px;
  margin-bottom: 20px;
}

.task-form input,
.task-form textarea,
.task-form select {
  width: 100%;
  padding: 10px;
  margin-bottom: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

.task-form textarea {
  height: 100px;
  resize: vertical;
}

.task-form button {
  background-color: #2196F3;
  color: white;
  border: none;
  padding: 10px 20px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  transition-duration: 0.4s;
  cursor: pointer;
  border-radius: 4px;
}

.task-form button:hover {
  background-color: #0b7dda;
}

.task-list {
  list-style-type: none;
  padding: 0;
}

.task {
  background-color: #fff;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 15px;
  margin-bottom: 15px;
}

.task h3 {
  margin-top: 0;
  margin-bottom: 10px;
  color: #333;
}

.task p {
  margin-bottom: 5px;
  color: #444;
}

.task-actions {
  margin-top: 10px;
}

.task-actions button {
  background-color: #f2f2f2;
  border: none;
  color: #333;
  padding: 8px 16px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 14px;
  margin-right: 10px;
  transition-duration: 0.4s;
  cursor: pointer;
  border-radius: 4px;
}

.task-actions button:hover {
  background-color: #ddd;
}

@media (max-width: 768px) {
  .task-form {
    padding: 15px;
  }
  
  .task-form input,
  .task-form textarea,
  .task-form select,
  .task-form button,
  .task-actions button {
    font-size: 14px;
  }
  
  .task {
    padding: 10px;
  }
}

================
File: frontend/src/components/TaskManagement.js
================
import React, { useState, useEffect, useCallback } from 'react';
import './TaskManagement.css';

const TaskManagement = ({ projectId }) => {
  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState({ name: '', description: '', assigned_to: '', due_date: '', status: 'Not Started' });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [editingTaskId, setEditingTaskId] = useState(null);

  const fetchTasks = useCallback(async () => {
    try {
      const response = await fetch(`/api/projects/${projectId}/tasks`);
      if (!response.ok) {
        throw new Error('Failed to fetch tasks');
      }
      const data = await response.json();
      setTasks(data);
      setLoading(false);
    } catch (err) {
      setError(err.message);
      setLoading(false);
    }
  }, [projectId]);

  useEffect(() => {
    fetchTasks();
  }, [fetchTasks]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewTask(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch(`/api/projects/${projectId}/tasks`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newTask),
      });

      if (!response.ok) {
        throw new Error('Failed to add task');
      }

      setNewTask({ name: '', description: '', assigned_to: '', due_date: '', status: 'Not Started' });
      fetchTasks();
    } catch (err) {
      setError(err.message);
    }
  };

  const handleEdit = (task) => {
    setEditingTaskId(task.id);
    setNewTask(task);
  };

  const handleUpdate = async () => {
    try {
      const response = await fetch(`/api/tasks/${editingTaskId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newTask),
      });

      if (!response.ok) {
        throw new Error('Failed to update task');
      }

      setEditingTaskId(null);
      setNewTask({ name: '', description: '', assigned_to: '', due_date: '', status: 'Not Started' });
      fetchTasks();
    } catch (err) {
      setError(err.message);
    }
  };

  const handleDelete = async (taskId) => {
    if (window.confirm('Are you sure you want to delete this task?')) {
      try {
        const response = await fetch(`/api/tasks/${taskId}`, {
          method: 'DELETE',
        });

        if (!response.ok) {
          throw new Error('Failed to delete task');
        }

        fetchTasks();
      } catch (err) {
        setError(err.message);
      }
    }
  };

  if (loading) return <div className="loading">Loading tasks...</div>;
  if (error) return <div className="error-message">Error: {error}</div>;

  return (
    <div className="task-management">
      <h2>Tasks</h2>
      <form onSubmit={editingTaskId ? handleUpdate : handleSubmit} className="task-form">
        <input
          type="text"
          name="name"
          value={newTask.name}
          onChange={handleInputChange}
          placeholder="Task Name"
          required
        />
        <textarea
          name="description"
          value={newTask.description}
          onChange={handleInputChange}
          placeholder="Task Description"
        ></textarea>
        <input
          type="text"
          name="assigned_to"
          value={newTask.assigned_to}
          onChange={handleInputChange}
          placeholder="Assigned To"
        />
        <input
          type="date"
          name="due_date"
          value={newTask.due_date}
          onChange={handleInputChange}
        />
        <select
          name="status"
          value={newTask.status}
          onChange={handleInputChange}
        >
          <option value="Not Started">Not Started</option>
          <option value="In Progress">In Progress</option>
          <option value="Completed">Completed</option>
        </select>
        <button type="submit">{editingTaskId ? 'Update Task' : 'Add Task'}</button>
        {editingTaskId && <button type="button" onClick={() => setEditingTaskId(null)}>Cancel Edit</button>}
      </form>
      <ul className="task-list">
        {tasks.map((task) => (
          <li key={task.id} className="task">
            <h3>{task.name}</h3>
            <p>{task.description}</p>
            <p><strong>Assigned to:</strong> {task.assigned_to}</p>
            <p><strong>Due Date:</strong> {new Date(task.due_date).toLocaleDateString()}</p>
            <p><strong>Status:</strong> {task.status}</p>
            <div className="task-actions">
              <button onClick={() => handleEdit(task)}>Edit</button>
              <button onClick={() => handleDelete(task.id)}>Delete</button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default TaskManagement;

================
File: frontend/src/components/UpcomingDeadlinesList.css
================
.upcoming-deadlines-list {
  height: 100%;
  display: flex;
  flex-direction: column;
}

.upcoming-deadlines-list h2 {
  font-size: 1.2rem;
  margin-bottom: 10px;
  color: #333;
}

.upcoming-deadlines-list ul {
  list-style-type: none;
  padding: 0;
  margin: 0;
  overflow-y: auto;
  flex-grow: 1;
}

.upcoming-deadlines-list li {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 0;
  border-bottom: 1px solid #eee;
}

.upcoming-deadlines-list li:last-child {
  border-bottom: none;
}

.upcoming-deadlines-list .project-name {
  flex-grow: 1;
  margin-right: 10px;
}

.upcoming-deadlines-list .deadline-date,
.upcoming-deadlines-list .days-left {
  flex-shrink: 0;
}

.upcoming-deadlines-list .urgent {
  color: #ff4136;
  font-weight: bold;
}

@media (max-width: 768px) {
  .upcoming-deadlines-list {
    height: 300px;
  }
}

================
File: frontend/src/components/UpcomingDeadlinesList.js
================
import React from 'react';
import './UpcomingDeadlinesList.css';

const UpcomingDeadlinesList = ({ data }) => {
  if (!Array.isArray(data) || data.length === 0) {
    return <div className="upcoming-deadlines-list">No upcoming deadlines</div>;
  }

  return (
    <div className="upcoming-deadlines-list">
      <h2>Upcoming Deadlines</h2>
      <ul>
        {data.map((item, index) => {
          const deadline = new Date(item.end_date);
          const today = new Date();
          const daysLeft = Math.ceil((deadline - today) / (1000 * 60 * 60 * 24));
          return (
            <li key={index} className={daysLeft <= 7 ? 'urgent' : ''}>
              <span className="project-name">{item.name}</span>
              <span className="deadline-date">{deadline.toLocaleDateString()}</span>
              <span className="days-left">{daysLeft} days left</span>
            </li>
          );
        })}
      </ul>
    </div>
  );
};

export default UpcomingDeadlinesList;

================
File: frontend/src/components/UpcomingDeadlinesTable.css
================
.upcoming-deadlines-table {
  background-color: #ffffff;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  padding: 20px;
  margin-bottom: 20px;
}

.upcoming-deadlines-table h2 {
  font-size: 1.5rem;
  margin-bottom: 15px;
  color: #333;
}

.upcoming-deadlines-table table {
  width: 100%;
  border-collapse: collapse;
}

.upcoming-deadlines-table th,
.upcoming-deadlines-table td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid #ddd;
}

.upcoming-deadlines-table th {
  background-color: #f2f2f2;
  font-weight: bold;
  cursor: pointer;
}

.upcoming-deadlines-table th:hover {
  background-color: #e0e0e0;
}

.upcoming-deadlines-table .urgent {
  color: #ff4136;
  font-weight: bold;
}

@media (max-width: 768px) {
  .upcoming-deadlines-table {
    padding: 15px;
  }
  
  .upcoming-deadlines-table table {
    font-size: 14px;
  }
  
  .upcoming-deadlines-table th,
  .upcoming-deadlines-table td {
    padding: 8px;
  }
}

================
File: frontend/src/components/UpcomingDeadlinesTable.js
================
import React, { useState } from 'react';
import './UpcomingDeadlinesTable.css';

const UpcomingDeadlinesTable = ({ data, filter }) => {
  const [sortConfig, setSortConfig] = useState({ key: 'end_date', direction: 'asc' });

  if (!Array.isArray(data) || data.length === 0) {
    return <div className="upcoming-deadlines-table">No upcoming deadlines</div>;
  }

  const sortedData = [...data].sort((a, b) => {
    if (a[sortConfig.key] < b[sortConfig.key]) {
      return sortConfig.direction === 'asc' ? -1 : 1;
    }
    if (a[sortConfig.key] > b[sortConfig.key]) {
      return sortConfig.direction === 'asc' ? 1 : -1;
    }
    return 0;
  });

  const filteredData = filter
    ? sortedData.filter(item => item.status.toLowerCase() === filter.toLowerCase())
    : sortedData;

  const requestSort = (key) => {
    let direction = 'asc';
    if (sortConfig.key === key && sortConfig.direction === 'asc') {
      direction = 'desc';
    }
    setSortConfig({ key, direction });
  };

  return (
    <div className="upcoming-deadlines-table">
      <h2>Upcoming Deadlines</h2>
      <table>
        <thead>
          <tr>
            <th onClick={() => requestSort('name')}>Project Name</th>
            <th onClick={() => requestSort('end_date')}>Deadline</th>
            <th onClick={() => requestSort('status')}>Status</th>
            <th>Days Left</th>
          </tr>
        </thead>
        <tbody>
          {filteredData.map((item, index) => {
            const deadline = new Date(item.end_date);
            const today = new Date();
            const daysLeft = Math.ceil((deadline - today) / (1000 * 60 * 60 * 24));
            return (
              <tr key={index}>
                <td>{item.name}</td>
                <td>{deadline.toLocaleDateString()}</td>
                <td>{item.status}</td>
                <td className={daysLeft <= 7 ? 'urgent' : ''}>{daysLeft} days</td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
};

export default UpcomingDeadlinesTable;

================
File: frontend/src/Dashboard - Copy.css
================
.dashboard-container {
  display: flex;
  flex-direction: column;
  padding: 20px;
  height: calc(100vh - 140px); /* Adjust based on your header and nav height */
}

.dashboard-badges-wrapper {
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
}

.dashboard-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-template-rows: 1fr 1fr;
  gap: 20px;
  flex-grow: 1;
}

.dashboard-grid-item {
  background-color: #ffffff;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  padding: 20px;
  overflow: auto;
}

.loading,
.error-message {
  text-align: center;
  margin-top: 50px;
  font-size: 18px;
  color: #666;
}

.error-message {
  color: #ff4136;
}

@media (max-width: 1200px) {
  .dashboard-grid {
    grid-template-columns: 1fr;
    grid-template-rows: repeat(4, 1fr);
  }
}

================
File: frontend/src/Dashboard.css
================
.dashboard-container {
  display: flex;
  flex-direction: column;
  padding: 20px;
  height: calc(100vh - 140px); /* Adjust based on your header and nav height */
}

.dashboard-badges-wrapper {
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
}

.dashboard-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-template-rows: 1fr 1fr;
  gap: 20px;
  flex-grow: 1;
}

.dashboard-grid-item {
  background-color: #ffffff;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  padding: 20px;
  overflow: auto;
}

.loading,
.error-message {
  text-align: center;
  margin-top: 50px;
  font-size: 18px;
  color: #666;
}

.error-message {
  color: #ff4136;
}

@media (max-width: 1200px) {
  .dashboard-grid {
    grid-template-columns: 1fr;
    grid-template-rows: repeat(4, 1fr);
  }
}

================
File: frontend/src/index.css
================
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

================
File: frontend/src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: frontend/src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: package.json
================
{
  "name": "cogipro",
  "version": "1.0.0",
  "description": "CogiPro Internal Project Management",
  "main": "index.js",
  "scripts": {
    "start": "concurrently \"npm run start:backend\" \"npm run start:frontend\"",
    "start:backend": "cd backend && node server/server.js",
    "start:frontend": "cd frontend && npm start",
    "install": "cd backend && npm install && cd ../frontend && npm install",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "concurrently": "^9.0.1"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.17.1",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^5.3.0",
    "react-toastify": "^10.0.5",
    "sqlite3": "^5.1.7"
  }
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>CogiPro</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:
